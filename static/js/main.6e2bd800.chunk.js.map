{"version":3,"sources":["components/TodoApp.js","components/TodoItem.js","components/TodoList.js","components/TodosFilter.js","App.js","index.js"],"names":["TodoApp","state","input","addTask","trim","props","setState","inputChange","event","target","value","handleSubmit","preventDefault","this","onSubmit","type","onChange","className","placeholder","React","Component","TodoItem","task","toggleCompleteTask","deleteTask","key","id","classnames","completed","checked","onClick","title","TodoList","tasks","map","TodosFilter","tasksToShow","actualFilter","toggleActiveTasks","href","selected","App","taskName","prevState","push","length","index","indexOf","clearCompleted","filter","filterTodos","whichTasksToShow","filterName","visibleTasks","htmlFor","ReactDOM","render","document","getElementById"],"mappings":"6PA6CeA,E,4MAzCbC,MAAQ,CACNC,MAAO,I,EAGTC,QAAU,WAAO,IACPD,EAAU,EAAKD,MAAfC,MAEJA,EAAME,SACR,EAAKC,MAAMF,QAAQD,GACnB,EAAKI,SAAS,CAAEJ,MAAO,O,EAI3BK,YAAc,SAAAC,GAAK,OAAI,EAAKF,SAAS,CAAEJ,MAAOM,EAAMC,OAAOC,S,EAE3DC,aAAe,SAACH,GACdA,EAAMI,iBACN,EAAKT,W,uDAGG,IACAD,EAAUW,KAAKZ,MAAfC,MAER,OACE,0BAAMY,SAAUD,KAAKF,cACnB,2BACEI,KAAK,OACLL,MAAOR,EACPc,SAAUH,KAAKN,YACfU,UAAU,WACVC,YAAY,gC,GA/BAC,IAAMC,W,gBC2CbC,E,4MAzCbpB,MAAQ,G,uDAEE,IAAD,EAC0CY,KAAKR,MAA9CiB,EADD,EACCA,KAAMC,EADP,EACOA,mBAAoBC,EAD3B,EAC2BA,WAElC,OACE,wBACEC,IAAKH,EAAKI,GACVT,UAAWU,IAAW,CAAEC,UAAWN,EAAKM,aAExC,yBAAKX,UAAU,QACb,2BACEF,KAAK,WACLE,UAAU,SACVY,QAASP,EAAKM,UACdF,GAAIJ,EAAKI,GACTI,QAAS,kBAAMP,EAAmBD,EAAKI,OAEzC,+BAAQJ,EAAKS,OACb,4BACEhB,KAAK,SACLE,UAAU,UACVa,QAAS,kBAAMN,EAAWF,EAAKI,QAGnC,2BAAOX,KAAK,OAAOE,UAAU,c,GA1BdE,IAAMC,WCmEdY,E,4MAlEb/B,MAAQ,G,uDAIE,IAAD,EAC2CY,KAAKR,MAA/C4B,EADD,EACCA,MAAOV,EADR,EACQA,mBAAoBC,EAD5B,EAC4BA,WAEnC,OACE,wBAAIP,UAAU,aACXgB,EAAMC,KAAI,SAAAZ,GAAI,OACb,kBAAC,EAAD,CACEA,KAAMA,EACNC,mBAAoBA,EACpBC,WAAYA,Y,GAdDL,IAAMC,WCkBde,EAlBK,SAAC,GAAD,IAAGC,EAAH,EAAGA,YAAaC,EAAhB,EAAgBA,aAAcC,EAA9B,EAA8BA,kBAA9B,OAClB,4BACE,uBACEC,KAAI,YAAOF,GACXpB,UAAWU,IAAW,CAAEa,SAAUH,IAAiBD,IACnDN,QAAS,kBAAMQ,EAAkBD,KAEhCA,KC6IQI,E,4MAlJbxC,MAAQ,CACNgC,MAAO,GACPG,YAAa,O,EAGfjC,QAAU,SAACuC,GACT,EAAKpC,UAAS,SAACqC,GAAe,IACpBV,EAAUU,EAAVV,MAQR,OANAA,EAAMW,KAAK,CACTlB,GAAqB,IAAjBO,EAAMY,OAAeZ,EAAMY,OAAS,EACxCd,MAAOW,EACPd,WAAW,IAGNK,M,EAIXV,mBAAqB,SAACG,GACpB,EAAKpB,UAAS,SAAAqC,GAAS,MAAK,CAC1BV,MAAOU,EAAUV,MAAMC,KAAI,SAACZ,GAC1B,OAAIA,EAAKI,KAAOA,EACPJ,EAGF,2BACFA,GADL,IAEEM,WAAYN,EAAKM,oB,EAMzBJ,WAAa,SAACE,GACZ,IAAMoB,EAAQ,EAAK7C,MAAMgC,MAAMC,KAAI,SAAAZ,GAAI,OAAIA,EAAKI,MAAIqB,QAAQrB,GAE5D,EAAKpB,UAAS,SAACqC,GAAe,IACpBV,EAAUU,EAAVV,MAIR,cAFOA,EAAMa,GAENb,M,EAIXe,eAAiB,WACf,EAAK1C,UAAS,SAAAqC,GAAS,MAAK,CAC1BV,MAAOU,EAAUV,MAAMgB,QAAO,SAAA3B,GAAI,OAAuB,IAAnBA,EAAKM,kB,EAK/CsB,YAAc,SAACC,GAAsB,IAC3BlB,EAAU,EAAKhC,MAAfgC,MAER,OAAQkB,GACN,IAAK,SACH,OAAOlB,EAAMgB,QAAO,SAAA3B,GAAI,OAAKA,EAAKM,aAEpC,IAAK,YACH,OAAOK,EAAMgB,QAAO,SAAA3B,GAAI,OAAIA,EAAKM,aAEnC,QACE,OAAOK,I,EAIbK,kBAAoB,SAACc,GACnB,EAAK9C,SAAS,CAAE8B,YAAagB,K,uDAIrB,IAAD,SACwBvC,KAAKZ,MAA5BgC,EADD,EACCA,MAAOG,EADR,EACQA,YACTiB,EAAexC,KAAKqC,YAAYd,GAGtC,OACE,6BAASnB,UAAU,WACjB,4BAAQA,UAAU,UAChB,qCACA,kBAAC,EAAD,CAASd,QAASU,KAAKV,WAGzB,6BAASc,UAAU,QACjB,2BACEF,KAAK,WACLW,GAAG,aACHT,UAAU,eAGZ,2BAAOqC,QAAQ,cAAf,wBAEA,kBAAC,EAAD,CACErB,MAAOoB,EACP9B,mBAAoBV,KAAKU,mBACzBC,WAAYX,KAAKW,cAKrB,4BAAQP,UAAU,UAChB,0BAAMA,UAAU,cAEbgB,EAAMgB,QAAO,SAAA3B,GAAI,OAAuB,IAAnBA,EAAKM,aAAqBiB,OAFlD,eAQA,wBAAI5B,UAAU,WAnCE,CAAC,MAAO,SAAU,aAoCjBiB,KAAI,SAAAe,GAAM,OACvB,kBAAC,EAAD,CACEb,YAAaA,EACbX,IAAKwB,EACLZ,aAAcY,EACdX,kBAAmB,EAAKA,wBAgB9B,4BACEvB,KAAK,SACLE,UAAU,kBACVa,QAASjB,KAAKmC,gBAHhB,yB,GAtIQ7B,IAAMC,WCCxBmC,IAASC,OACP,kBAAC,EAAD,MACAC,SAASC,eAAe,U","file":"static/js/main.6e2bd800.chunk.js","sourcesContent":["import React from 'react';\nimport propTypes from 'prop-types';\n\nclass TodoApp extends React.Component {\n  state = {\n    input: '',\n  };\n\n  addTask = () => {\n    const { input } = this.state;\n\n    if (input.trim()) {\n      this.props.addTask(input);\n      this.setState({ input: '' });\n    }\n  }\n\n  inputChange = event => this.setState({ input: event.target.value });\n\n  handleSubmit = (event) => {\n    event.preventDefault();\n    this.addTask();\n  }\n\n  render() {\n    const { input } = this.state;\n\n    return (\n      <form onSubmit={this.handleSubmit}>\n        <input\n          type=\"text\"\n          value={input}\n          onChange={this.inputChange}\n          className=\"new-todo\"\n          placeholder=\"What needs to be done?\"\n        />\n      </form>\n    );\n  }\n}\n\nTodoApp.propTypes = {\n  addTask: propTypes.func.isRequired,\n};\n\nexport default TodoApp;\n","import React from 'react';\nimport propTypes from 'prop-types';\nimport classnames from 'classnames';\n\nclass TodoItem extends React.Component {\n  state = {}\n\n  render() {\n    const { task, toggleCompleteTask, deleteTask } = this.props;\n\n    return (\n      <li\n        key={task.id}\n        className={classnames({ completed: task.completed })}\n      >\n        <div className=\"view\">\n          <input\n            type=\"checkbox\"\n            className=\"toggle\"\n            checked={task.completed}\n            id={task.id}\n            onClick={() => toggleCompleteTask(task.id)}\n          />\n          <label>{task.title}</label>\n          <button\n            type=\"button\"\n            className=\"destroy\"\n            onClick={() => deleteTask(task.id)}\n          />\n        </div>\n        <input type=\"text\" className=\"edit\" />\n      </li>\n    );\n  }\n}\n\nTodoItem.propTypes = {\n  task: propTypes.objectOf(propTypes.shape({\n    id: propTypes.number.isRequired,\n    title: propTypes.string.isRequired,\n    completed: propTypes.bool.isRequired,\n  })).isRequired,\n  toggleCompleteTask: propTypes.func.isRequired,\n  deleteTask: propTypes.func.isRequired,\n};\n\nexport default TodoItem;\n","import React from 'react';\nimport propTypes from 'prop-types';\nimport TodoItem from './TodoItem';\n\nclass TodoList extends React.Component {\n  state = {\n\n  }\n\n  render() {\n    const { tasks, toggleCompleteTask, deleteTask } = this.props;\n\n    return (\n      <ul className=\"todo-list\">\n        {tasks.map(task => (\n          <TodoItem\n            task={task}\n            toggleCompleteTask={toggleCompleteTask}\n            deleteTask={deleteTask}\n          />\n        ))}\n        {/* <li>\n          <div className=\"view\">\n            <input type=\"checkbox\" className=\"toggle\" id=\"todo-1\" />\n            <label htmlFor=\"todo-1\">asdfghj</label>\n            <button type=\"button\" className=\"destroy\" />\n          </div>\n          <input type=\"text\" className=\"edit\" />\n        </li>\n\n        <li className=\"completed\">\n          <div className=\"view\">\n            <input type=\"checkbox\" className=\"toggle\" id=\"todo-2\" />\n            <label htmlFor=\"todo-2\">qwertyuio</label>\n            <button type=\"button\" className=\"destroy\" />\n          </div>\n          <input type=\"text\" className=\"edit\" />\n        </li>\n\n        <li className=\"editing\">\n          <div className=\"view\">\n            <input type=\"checkbox\" className=\"toggle\" id=\"todo-3\" />\n            <label htmlFor=\"todo-3\">zxcvbnm</label>\n            <button type=\"button\" className=\"destroy\" />\n          </div>\n          <input type=\"text\" className=\"edit\" />\n        </li>\n\n        <li>\n          <div className=\"view\">\n            <input type=\"checkbox\" className=\"toggle\" id=\"todo-4\" />\n            <label htmlFor=\"todo-4\">1234567890</label>\n            <button type=\"button\" className=\"destroy\" />\n          </div>\n          <input type=\"text\" className=\"edit\" />\n        </li> */}\n      </ul>\n    );\n  }\n}\n\nTodoList.propTypes = {\n  tasks: propTypes.arrayOf(propTypes.shape({\n    id: propTypes.number.isRequired,\n    title: propTypes.string.isRequired,\n    completed: propTypes.bool.isRequired,\n  })).isRequired,\n  toggleCompleteTask: propTypes.func.isRequired,\n  deleteTask: propTypes.func.isRequired,\n};\n\nexport default TodoList;\n","import React from 'react';\nimport classnames from 'classnames';\nimport propTypes from 'prop-types';\n\nconst TodosFilter = ({ tasksToShow, actualFilter, toggleActiveTasks }) => (\n  <li>\n    <a\n      href={`#/${actualFilter}`}\n      className={classnames({ selected: actualFilter === tasksToShow })}\n      onClick={() => toggleActiveTasks(actualFilter)}\n    >\n      {actualFilter}\n    </a>\n  </li>\n);\n\nTodosFilter.propTypes = {\n  tasksToShow: propTypes.string.isRequired,\n  actualFilter: propTypes.string.isRequired,\n  toggleActiveTasks: propTypes.func.isRequired,\n};\n\nexport default TodosFilter;\n","import React from 'react';\nimport TodoApp from './components/TodoApp';\nimport TodoList from './components/TodoList';\nimport TodosFilter from './components/TodosFilter';\n\nclass App extends React.Component {\n  state = {\n    tasks: [],\n    tasksToShow: 'all',\n  };\n\n  addTask = (taskName) => {\n    this.setState((prevState) => {\n      const { tasks } = prevState;\n\n      tasks.push({\n        id: tasks.length !== 0 ? tasks.length : 0,\n        title: taskName,\n        completed: false,\n      });\n\n      return tasks;\n    });\n  };\n\n  toggleCompleteTask = (id) => {\n    this.setState(prevState => ({\n      tasks: prevState.tasks.map((task) => {\n        if (task.id !== id) {\n          return task;\n        }\n\n        return {\n          ...task,\n          completed: !task.completed,\n        };\n      }),\n    }));\n  };\n\n  deleteTask = (id) => {\n    const index = this.state.tasks.map(task => task.id).indexOf(id);\n\n    this.setState((prevState) => {\n      const { tasks } = prevState;\n\n      delete tasks[index];\n\n      return tasks;\n    });\n  }\n\n  clearCompleted = () => {\n    this.setState(prevState => ({\n      tasks: prevState.tasks.filter(task => task.completed === false),\n    }));\n  }\n\n  // filter starts!!!!!!!!!!!!!!!!!!!!!!\n  filterTodos = (whichTasksToShow) => {\n    const { tasks } = this.state;\n\n    switch (whichTasksToShow) {\n      case 'active':\n        return tasks.filter(task => !task.completed);\n\n      case 'completed':\n        return tasks.filter(task => task.completed);\n\n      default:\n        return tasks;\n    }\n  }\n\n  toggleActiveTasks = (filterName) => {\n    this.setState({ tasksToShow: filterName });\n  }\n  // filter ends !!!!!!!!!!!!!!!!!!!!\n\n  render() {\n    const { tasks, tasksToShow } = this.state;\n    const visibleTasks = this.filterTodos(tasksToShow);\n    const filteringBtns = ['all', 'active', 'completed'];\n\n    return (\n      <section className=\"todoapp\">\n        <header className=\"header\">\n          <h1>todos</h1>\n          <TodoApp addTask={this.addTask} />\n        </header>\n\n        <section className=\"main\">\n          <input\n            type=\"checkbox\"\n            id=\"toggle-all\"\n            className=\"toggle-all\"\n            // checked={tasks.every(task => task.completed)}\n          />\n          <label htmlFor=\"toggle-all\">Mark all as complete</label>\n\n          <TodoList\n            tasks={visibleTasks}\n            toggleCompleteTask={this.toggleCompleteTask}\n            deleteTask={this.deleteTask}\n          />\n\n        </section>\n\n        <footer className=\"footer\">\n          <span className=\"todo-count\">\n            {/* eslint-disable-next-line react/jsx-one-expression-per-line */}\n            {tasks.filter(task => task.completed === false).length} items left\n          </span>\n          {/* <TodosFilter /> */}\n\n          {/* above or below only */}\n\n          <ul className=\"filters\">\n            {filteringBtns.map(filter => (\n              <TodosFilter\n                tasksToShow={tasksToShow}\n                key={filter}\n                actualFilter={filter}\n                toggleActiveTasks={this.toggleActiveTasks}\n              />\n            ))}\n            {/* <li>\n              <a href=\"#/\" className=\"selected\">All</a>\n            </li>\n\n            <li>\n              <a href=\"#/active\">Active</a>\n            </li>\n\n            <li>\n              <a href=\"#/completed\">Completed</a>\n            </li> */}\n          </ul>\n\n          <button\n            type=\"button\"\n            className=\"clear-completed\"\n            onClick={this.clearCompleted}\n          >\n            Clear completed\n          </button>\n        </footer>\n      </section>\n    );\n  }\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './base.css';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}