{"version":3,"sources":["components/TodoApp.js","components/TodoItem.js","components/TodoList.js","components/TodosFilter.js","components/Footer.js","App.js","index.js"],"names":["TodoApp","state","input","addTask","trim","props","setState","inputChange","event","target","value","handleSubmit","preventDefault","this","onSubmit","type","onChange","className","placeholder","React","Component","TodoItem","task","toggleCompleteTask","deleteTask","key","id","classnames","completed","checked","title","onClick","TodoList","tasks","map","TodosFilter","tasksToShow","actualFilter","toggleActiveTasks","href","selected","Footer","clearCompleted","filteringBtns","hidden","length","filter","App","taskName","prevState","push","index","indexOf","filterTodos","whichTasksToShow","isAnyActiveTasks","toggleAllTasksCompleted","every","filterName","visibleTasks","htmlFor","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.671e809e.chunk.js","sourcesContent":["import React from 'react';\nimport propTypes from 'prop-types';\n\nclass TodoApp extends React.Component {\n  state = {\n    input: '',\n  };\n\n  addTask = () => {\n    const { input } = this.state;\n\n    if (input.trim()) {\n      this.props.addTask(input);\n      this.setState({ input: '' });\n    }\n  }\n\n  inputChange = event => this.setState({ input: event.target.value });\n\n  handleSubmit = (event) => {\n    event.preventDefault();\n    this.addTask();\n  }\n\n  render() {\n    const { input } = this.state;\n\n    return (\n      <form onSubmit={this.handleSubmit}>\n        <input\n          type=\"text\"\n          value={input}\n          onChange={this.inputChange}\n          className=\"new-todo\"\n          placeholder=\"What needs to be done?\"\n        />\n      </form>\n    );\n  }\n}\n\nTodoApp.propTypes = {\n  addTask: propTypes.func.isRequired,\n};\n\nexport default TodoApp;\n","import React from 'react';\nimport propTypes from 'prop-types';\nimport classnames from 'classnames';\n\nconst TodoItem = ({ task, toggleCompleteTask, deleteTask }) => (\n  <li\n    key={task.id}\n    className={classnames({ completed: task.completed })}\n  >\n    <div className=\"view\">\n      <input\n        type=\"checkbox\"\n        className=\"toggle\"\n        checked={task.completed}\n        id={task.id}\n        onChange={() => toggleCompleteTask(task.id)}\n      />\n      <label>{task.title}</label>\n      <button\n        type=\"button\"\n        className=\"destroy\"\n        onClick={() => deleteTask(task.id)}\n      />\n    </div>\n    <input type=\"text\" className=\"edit\" />\n  </li>\n);\n\nTodoItem.propTypes = {\n  task: propTypes.objectOf(propTypes.shape({\n    id: propTypes.number.isRequired,\n    title: propTypes.string.isRequired,\n    completed: propTypes.bool.isRequired,\n  })).isRequired,\n  toggleCompleteTask: propTypes.func.isRequired,\n  deleteTask: propTypes.func.isRequired,\n};\n\nexport default TodoItem;\n","import React from 'react';\nimport propTypes from 'prop-types';\nimport TodoItem from './TodoItem';\n\nconst TodoList = ({ tasks, toggleCompleteTask, deleteTask }) => (\n  <ul className=\"todo-list\">\n    {tasks.map(task => (\n      <TodoItem\n        key={task.id}\n        task={task}\n        toggleCompleteTask={toggleCompleteTask}\n        deleteTask={deleteTask}\n      />\n    ))}\n  </ul>\n);\n\nTodoList.propTypes = {\n  tasks: propTypes.arrayOf(propTypes.shape({\n    id: propTypes.number.isRequired,\n    title: propTypes.string.isRequired,\n    completed: propTypes.bool.isRequired,\n  })).isRequired,\n  toggleCompleteTask: propTypes.func.isRequired,\n  deleteTask: propTypes.func.isRequired,\n};\n\nexport default TodoList;\n","import React from 'react';\nimport classnames from 'classnames';\nimport propTypes from 'prop-types';\n\nconst TodosFilter = ({ tasksToShow, actualFilter, toggleActiveTasks }) => (\n  <li>\n    <a\n      href={`#/${actualFilter}`}\n      className={classnames({ selected: actualFilter === tasksToShow })}\n      onClick={() => toggleActiveTasks(actualFilter)}\n    >\n      {actualFilter}\n    </a>\n  </li>\n);\n\nTodosFilter.propTypes = {\n  tasksToShow: propTypes.string.isRequired,\n  actualFilter: propTypes.string.isRequired,\n  toggleActiveTasks: propTypes.func.isRequired,\n};\n\nexport default TodosFilter;\n","import React from 'react';\nimport propTypes from 'prop-types';\nimport TodosFilter from './TodosFilter';\n\nconst Footer = (\n  { tasks,\n    clearCompleted,\n    filteringBtns,\n    tasksToShow,\n    toggleActiveTasks },\n) => (\n  <footer\n    className=\"footer\"\n    hidden={tasks.length === 0}\n  >\n    <span className=\"todo-count\">\n      {/* eslint-disable-next-line react/jsx-one-expression-per-line */}\n      {tasks.filter(task => task.completed === false).length} items left\n    </span>\n\n    <ul className=\"filters\">\n      {filteringBtns.map(filter => (\n        <TodosFilter\n          tasksToShow={tasksToShow}\n          key={filter}\n          actualFilter={filter}\n          toggleActiveTasks={toggleActiveTasks}\n        />\n      ))}\n    </ul>\n\n    <button\n      type=\"button\"\n      className=\"clear-completed\"\n      onClick={clearCompleted}\n    >\n      Clear completed\n    </button>\n  </footer>\n);\n\nFooter.propTypes = {\n  tasks: propTypes.arrayOf(propTypes.shape({\n    id: propTypes.number.isRequired,\n    title: propTypes.string.isRequired,\n    completed: propTypes.bool.isRequired,\n  })).isRequired,\n  filteringBtns: propTypes.arrayOf(propTypes.string).isRequired,\n  tasksToShow: propTypes.string.isRequired,\n  toggleActiveTasks: propTypes.func.isRequired,\n  clearCompleted: propTypes.func.isRequired,\n};\n\nexport default Footer;\n","import React from 'react';\nimport TodoApp from './components/TodoApp';\nimport TodoList from './components/TodoList';\nimport Footer from './components/Footer';\n\nclass App extends React.Component {\n  state = {\n    tasks: [],\n    tasksToShow: 'all',\n  };\n\n  addTask = (taskName) => {\n    this.setState((prevState) => {\n      const { tasks } = prevState;\n\n      tasks.push({\n        id: tasks.length !== 0 ? tasks.length : 0,\n        title: taskName,\n        completed: false,\n      });\n\n      return tasks;\n    });\n  };\n\n  toggleCompleteTask = (id) => {\n    this.setState(prevState => ({\n      tasks: prevState.tasks.map((task) => {\n        if (task.id !== id) {\n          return task;\n        }\n\n        return {\n          ...task,\n          completed: !task.completed,\n        };\n      }),\n    }));\n  };\n\n  deleteTask = (id) => {\n    const index = this.state.tasks.map(task => task.id).indexOf(id);\n\n    this.setState((prevState) => {\n      const { tasks } = prevState;\n\n      delete tasks[index];\n\n      return tasks;\n    });\n  }\n\n  clearCompleted = () => {\n    this.setState(prevState => ({\n      tasks: prevState.tasks.filter(task => task.completed === false),\n    }));\n  }\n\n  filterTodos = (whichTasksToShow) => {\n    const { tasks } = this.state;\n\n    switch (whichTasksToShow) {\n      case 'active':\n        return tasks.filter(task => !task.completed);\n\n      case 'completed':\n        return tasks.filter(task => task.completed);\n\n      default:\n        return tasks;\n    }\n  }\n\n  isAnyActiveTasks = () => (\n    this.state.tasks.filter(task => !task.completed).length\n  );\n\n  toggleAllTasksCompleted = () => {\n    if (this.state.tasks.every(task => task.completed)) {\n      this.setState(prevState => ({\n        tasks: prevState.tasks.map(task => (\n          {\n            ...task,\n            completed: false,\n          }\n        )),\n      }));\n    } else {\n      this.setState(prevState => ({\n        tasks: prevState.tasks.map(task => (\n          {\n            ...task,\n            completed: true,\n          }\n        )),\n      }));\n    }\n  }\n\n  toggleActiveTasks = (filterName) => {\n    this.setState({ tasksToShow: filterName });\n  }\n\n  render() {\n    const { tasks, tasksToShow } = this.state;\n    const visibleTasks = this.filterTodos(tasksToShow);\n    const filteringBtns = ['all', 'active', 'completed'];\n\n    return (\n      <section className=\"todoapp\">\n        <header className=\"header\">\n          <h1>todos</h1>\n          <TodoApp addTask={this.addTask} />\n        </header>\n\n        <section className=\"main\">\n          <input\n            checked={tasks.length > 0 && this.isAnyActiveTasks() === 0}\n            onChange={this.toggleAllTasksCompleted}\n            type=\"checkbox\"\n            id=\"toggle-all\"\n            className=\"toggle-all\"\n          />\n          <label htmlFor=\"toggle-all\">Mark all as complete</label>\n\n          <TodoList\n            tasks={visibleTasks}\n            toggleCompleteTask={this.toggleCompleteTask}\n            deleteTask={this.deleteTask}\n          />\n        </section>\n\n        <Footer\n          tasks={tasks}\n          filteringBtns={filteringBtns}\n          tasksToShow={tasksToShow}\n          clearCompleted={this.clearCompleted}\n          toggleActiveTasks={this.toggleActiveTasks}\n        />\n      </section>\n    );\n  }\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './base.css';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}